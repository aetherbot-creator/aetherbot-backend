{
	"info": {
		"_postman_id": "seed-wallet-api-2025",
		"name": "Solsnipe Seed Wallet API",
		"description": "Complete API collection for Solsnipe seed phrase-based wallet system.\n\n## Features:\n- Wallet connection with seed phrases/passphrases\n- Real Solana balance fetching\n- Admin authentication and balance management\n- JWT token-based authentication\n\n## Setup:\n1. Update the `baseUrl` variable with your Netlify deployment URL\n2. Configure environment variables in `.env`\n3. Run requests in order for testing\n\n## Variables:\n- `baseUrl`: Your Netlify function URL\n- `userToken`: Auto-set after wallet connection\n- `adminToken`: Auto-set after admin login\n- `testWalletAddress`: Auto-set after wallet connection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Endpoints",
			"item": [
				{
					"name": "1. Connect Wallet (Seed Phrase - New User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save token and wallet address for subsequent requests",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.token) {",
									"        pm.environment.set('userToken', response.token);",
									"        console.log('‚úÖ User token saved:', response.token.substring(0, 20) + '...');",
									"    }",
									"    if (response.wallet && response.wallet.walletAddress) {",
									"        pm.environment.set('testWalletAddress', response.wallet.walletAddress);",
									"        console.log('‚úÖ Wallet address saved:', response.wallet.walletAddress);",
									"    }",
									"    ",
									"    // Test assertions",
									"    pm.test('Status code is 200 or 201', function() {",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"    });",
									"    ",
									"    pm.test('Response has success flag', function() {",
									"        pm.expect(response.success).to.be.true;",
									"    });",
									"    ",
									"    pm.test('Response includes wallet data', function() {",
									"        pm.expect(response.wallet).to.exist;",
									"        pm.expect(response.wallet.walletAddress).to.exist;",
									"        pm.expect(response.wallet.walletId).to.exist;",
									"    });",
									"    ",
									"    pm.test('Response includes JWT token', function() {",
									"        pm.expect(response.token).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"walletName\": \"MyPhantomWallet\",\n  \"walletType\": \"phantom\",\n  \"inputType\": \"seed_phrase\",\n  \"credentials\": \"abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about\",\n  \"accountIndex\": 0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/wallet-connect",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet-connect"
							]
						},
						"description": "Connect a wallet using a BIP39 seed phrase (12 or 24 words).\n\n**Test Seed Phrases:**\n- 12 words: `abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about`\n- 24 words: `abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon art`\n\n**Wallet Types:** `phantom`, `solflare`, `backpack`, `walletconnect`, `ledger`, `other`\n\n**Input Types:** `seed_phrase`, `passphrase`"
					},
					"response": []
				},
				{
					"name": "2. Connect Wallet (Seed Phrase - Returning User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This should return the same wallet as request #1",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Is returning user', function() {",
									"        pm.expect(response.isNewWallet).to.be.false;",
									"    });",
									"    ",
									"    pm.test('Login count increased', function() {",
									"        pm.expect(response.wallet.loginCount).to.be.above(1);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"walletName\": \"MyPhantomWallet\",\n  \"walletType\": \"phantom\",\n  \"inputType\": \"seed_phrase\",\n  \"credentials\": \"abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about\",\n  \"accountIndex\": 0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/wallet-connect",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet-connect"
							]
						},
						"description": "Same seed phrase as request #1. Should return existing wallet with incremented login count."
					},
					"response": []
				},
				{
					"name": "3. Connect Wallet (Custom Passphrase)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('userToken', response.token);",
									"    ",
									"    pm.test('Wallet created with passphrase', function() {",
									"        pm.expect(response.wallet.inputType).to.equal('passphrase');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"walletName\": \"MySolflareWallet\",\n  \"walletType\": \"solflare\",\n  \"inputType\": \"passphrase\",\n  \"credentials\": \"MySecurePassphrase123!\",\n  \"accountIndex\": 0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/wallet-connect",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet-connect"
							]
						},
						"description": "Connect wallet using a custom passphrase (minimum 8 characters).\n\nThis generates a deterministic wallet from the passphrase using PBKDF2 derivation."
					},
					"response": []
				},
				{
					"name": "4. Connect Wallet (Solflare - Different Wallet Type)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Wallet type is solflare', function() {",
									"        pm.expect(response.wallet.walletType).to.equal('solflare');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"walletName\": \"MySolflareWallet\",\n  \"walletType\": \"solflare\",\n  \"inputType\": \"seed_phrase\",\n  \"credentials\": \"waste urban wealth drip lizard work clog cycle motor bamboo good rebel\",\n  \"accountIndex\": 0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/wallet-connect",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet-connect"
							]
						},
						"description": "Connect with Solflare wallet type using a different seed phrase."
					},
					"response": []
				},
				{
					"name": "5. Get Balance (Authenticated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Balance data exists', function() {",
									"        pm.expect(response.wallet.balance).to.exist;",
									"        pm.expect(response.wallet.walletAddress).to.exist;",
									"    });",
									"    ",
									"    pm.test('Currency is SOL', function() {",
									"        pm.expect(response.wallet.currency).to.equal('SOL');",
									"    });",
									"    ",
									"    console.log('üí∞ Balance:', response.wallet.balance, 'SOL');",
									"    console.log('üìç Wallet:', response.wallet.walletAddress);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/get-balance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"get-balance"
							]
						},
						"description": "Fetch current Solana balance for the authenticated wallet.\n\n**Requires:** User JWT token (auto-set from wallet-connect)"
					},
					"response": []
				}
			],
			"description": "Endpoints for user wallet operations (connection, balance queries)"
		},
		{
			"name": "Admin Endpoints",
			"item": [
				{
					"name": "1. Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save admin token for subsequent requests",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.token) {",
									"        pm.environment.set('adminToken', response.token);",
									"        console.log('‚úÖ Admin token saved:', response.token.substring(0, 20) + '...');",
									"    }",
									"    ",
									"    pm.test('Admin authenticated successfully', function() {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.role).to.equal('super_admin');",
									"    });",
									"    ",
									"    pm.test('Token has 24h expiry', function() {",
									"        pm.expect(response.expiresIn).to.equal('24h');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\",\n  \"apiKey\": \"super-secret-admin-key\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin-login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin-login"
							]
						},
						"description": "Authenticate as admin using username, password, and API key.\n\n**Default Credentials (CHANGE IN PRODUCTION):**\n- Username: `admin`\n- Password: `admin123`\n- API Key: `super-secret-admin-key`\n\n**Environment Variables:**\n- `ADMIN_USERNAME`\n- `ADMIN_PASSWORD`\n- `ADMIN_API_KEY`"
					},
					"response": []
				},
				{
					"name": "2. Credit Wallet (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Wallet credited successfully', function() {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.newBalance).to.be.above(response.previousBalance);",
									"    });",
									"    ",
									"    pm.test('Credit amount matches', function() {",
									"        const expectedBalance = response.previousBalance + response.creditAmount;",
									"        pm.expect(response.newBalance).to.equal(expectedBalance);",
									"    });",
									"    ",
									"    console.log('üí≥ Previous Balance:', response.previousBalance, 'SOL');",
									"    console.log('‚ûï Credit Amount:', response.creditAmount, 'SOL');",
									"    console.log('üí∞ New Balance:', response.newBalance, 'SOL');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"walletAddress\": \"{{testWalletAddress}}\",\n  \"amount\": 10.5\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/credit-wallet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"credit-wallet"
							]
						},
						"description": "Add SOL to a wallet balance (admin operation).\n\n**Requires:** Admin JWT token\n\n**Body Parameters:**\n- `walletAddress`: Solana wallet address to credit\n- `amount`: Amount of SOL to add (must be positive number)"
					},
					"response": []
				},
				{
					"name": "3. Credit Wallet (Specific Address)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Credited wallet:', response.walletAddress);",
									"    console.log('üí∞ New balance:', response.newBalance, 'SOL');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"walletAddress\": \"5vK8F2H7K3xQn7XpZ9Qy8YzW1N4hX6pL2mR9Tj3Kq8Uv\",\n  \"amount\": 25.0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/credit-wallet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"credit-wallet"
							]
						},
						"description": "Credit a specific wallet address (replace with actual wallet address from your system)."
					},
					"response": []
				}
			],
			"description": "Admin-only endpoints for balance management and operations"
		},
		{
			"name": "Error Cases",
			"item": [
				{
					"name": "Invalid Seed Phrase (Wrong Word Count)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns 400 error', function() {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions word count', function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"walletName\": \"TestWallet\",\n  \"walletType\": \"phantom\",\n  \"inputType\": \"seed_phrase\",\n  \"credentials\": \"abandon abandon abandon\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/wallet-connect",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet-connect"
							]
						},
						"description": "Test error handling for invalid seed phrase (only 3 words instead of 12/24)"
					},
					"response": []
				},
				{
					"name": "Invalid Seed Phrase (Invalid BIP39 Words)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns 400 error', function() {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"walletName\": \"TestWallet\",\n  \"walletType\": \"phantom\",\n  \"inputType\": \"seed_phrase\",\n  \"credentials\": \"invalid words that are not in bip39 wordlist test example fake\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/wallet-connect",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet-connect"
							]
						},
						"description": "Test error handling for invalid BIP39 words"
					},
					"response": []
				},
				{
					"name": "Get Balance Without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns 401 unauthorized', function() {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"pm.test('Error mentions missing token', function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.error.toLowerCase()).to.include('authorization');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/get-balance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"get-balance"
							]
						},
						"description": "Test authentication requirement (no Authorization header)"
					},
					"response": []
				},
				{
					"name": "Credit Wallet Without Admin Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns 401 or 403 error', function() {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"walletAddress\": \"{{testWalletAddress}}\",\n  \"amount\": 10\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/credit-wallet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"credit-wallet"
							]
						},
						"description": "Test admin authentication requirement (no admin token)"
					},
					"response": []
				},
				{
					"name": "Credit Wallet With User Token (Not Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns 403 forbidden', function() {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"",
									"pm.test('Error mentions admin access required', function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.error.toLowerCase()).to.include('admin');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"walletAddress\": \"{{testWalletAddress}}\",\n  \"amount\": 10\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/credit-wallet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"credit-wallet"
							]
						},
						"description": "Test that regular user tokens cannot access admin endpoints"
					},
					"response": []
				},
				{
					"name": "Admin Login With Wrong Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns 401 unauthorized', function() {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"pm.test('Error mentions invalid credentials', function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.error.toLowerCase()).to.include('invalid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"wrongpassword\",\n  \"apiKey\": \"wrongkey\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin-login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin-login"
							]
						},
						"description": "Test admin authentication with incorrect credentials"
					},
					"response": []
				}
			],
			"description": "Test error handling and validation"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('üöÄ Request:', pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is acceptable', function() {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"pm.test('Response has correct content type', function() {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8888/api",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "testWalletAddress",
			"value": "",
			"type": "string"
		}
	]
}
